{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Starwars","state","name","gender","species","this","setState","$","html","setTimeout","random","Math","floor","console","log","fetch","then","response","json","data","image","className","type","onClick","info","id","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAIMA,E,kDACJ,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTC,KAAK,GACLC,OAAO,GACPC,QAAQ,IALC,E,wCAQb,WAAO,IAAD,OACJC,KAAKC,SAAS,CACZJ,KAAK,aACLC,OAAO,aACPC,QAAQ,eAEVG,IAAE,QAAQC,KAAK,sBACfC,YAAW,WACT,IAAMC,EAAOC,KAAKC,MAAoB,GAAdD,KAAKD,UAC7BG,QAAQC,IAAIJ,GACZK,MAAM,+DAAD,OAAgEL,EAAhE,UACJM,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GACJ,EAAKb,SAAS,CACZJ,KAAKiB,EAAKjB,KACVC,OAAOgB,EAAKhB,OACZC,QAAQe,EAAKf,UAEfG,IAAE,QAAQC,KAAV,oBAA4BW,EAAKC,MAAjC,0BAED,O,oBAEL,WAAS,IAAD,OACN,OACE,gCACE,oBAAIC,UAAU,kEAAd,8BAGA,4BACE,wBAAQC,KAAK,SAASD,UAAU,2CAA2CE,QAAS,kBAAI,EAAKC,QAA7F,6CAIF,sBAAKH,UAAU,mDAAmDI,GAAG,YAArE,UACE,sBAAKJ,UAAU,gCAAf,UACE,sBAAKA,UAAU,gCAAf,UACE,oBAAIA,UAAU,mDAAd,kBAGA,mBAAGA,UAAU,yBAAb,SACGhB,KAAKJ,MAAMC,UAGhB,sBAAKmB,UAAU,gCAAf,UACE,oBAAIA,UAAU,mDAAd,oBAGA,mBAAGA,UAAU,yBAAb,SACGhB,KAAKJ,MAAME,YAGhB,sBAAKkB,UAAU,gCAAf,UACE,oBAAIA,UAAU,mDAAd,qBAGA,mBAAGA,UAAU,yBAAb,SACGhB,KAAKJ,MAAMG,gBAIlB,qBAAKiB,UAAU,OAAf,SACE,mBAAGI,GAAG,oB,GAtEKC,IAAMC,WAwFdC,MARf,WACE,OACE,qBAAKP,UAAU,mBAAf,SACE,cAAC,EAAD,OC3ESQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2ac4898a.chunk.js","sourcesContent":["import './App.css';\nimport $ from 'jquery';\nimport React from 'react'; \n\nclass Starwars extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      name:'',\n      gender:'',\n      species:'',\n    }\n  }\n  info(){\n    this.setState({\n      name:'Loading...',\n      gender:'Loading...',\n      species:'Loading...',\n    })\n    $(\"#img\").html('<i>Loading....</i>')\n    setTimeout(() => {\n      const random=Math.floor(Math.random()*88)\n      console.log(random);\n      fetch(`https://rawcdn.githack.com/akabab/starwars-api/0.2.1/api/id/${random}.json`)\n      .then(response=>response.json())\n      .then(data=>{\n        this.setState({\n          name:data.name,\n          gender:data.gender,\n          species:data.species,\n        })\n        $(\"#img\").html(`<img src='${data.image}' width='40%' />`)\n      })\n    }, 1000);\n  }\n  render(){\n    return(\n      <div>\n        <h1 className='display-4 border-bottom d-inline-block pb-1 border-warning mt-2'>\n          StarWars Details\n        </h1>\n        <p>\n          <button type='button' className='btn btn-outline-primary btn-lg mt-5 mb-4' onClick={()=>this.info()}>\n            Get Information &#10071; &#10071;\n          </button>\n        </p>\n        <div className='container shadow-lg py-5 mb-5 bg-dark text-light' id='info-area'>\n          <div className='row mx-4 border border-danger'>\n            <div className='col-lg-4 border border-danger'>\n              <h2 className='border-bottom border-primary lead fs-2 pb-3 pt-2'>\n                Name\n              </h2>\n              <p className='fs-1 lead text-warning'>\n                {this.state.name}\n              </p>\n            </div>\n            <div className='col-lg-4 border border-danger'>\n              <h2 className='border-bottom border-primary lead fs-2 pb-3 pt-2'>\n                Gender\n              </h2>\n              <p className='fs-1 lead text-warning'>\n                {this.state.gender}\n              </p>\n            </div>\n            <div className='col-lg-4 border border-danger'>\n              <h2 className='border-bottom border-primary lead fs-2 pb-3 pt-2'>\n                Species\n              </h2>\n              <p className='fs-1 lead text-warning'>\n                {this.state.species}\n              </p>\n            </div>\n          </div>\n          <div className='mt-5'>\n            <p id='img'>\n\n            </p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"text-center px-5\">\n      <Starwars />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}